require "fakeCargo"
require 'pp'

FC = FakeCargo

class Processor
  def initialize(options)
    @root = FC::Env.new(options.output_dir || '.', '')
    @fetch = FC::Fetch.new(options.git_dir || '.', options.crates_dir)
    if ! File.directory?(@root.dir)
      raise Exception, "#{@root.dir} is not a directory."
    end
    action = options.command || "build"
    @action = self.method(action)
  end
  
  attr_reader :root
  def root_file(filename)
    env = @root.new_child(File.basename(File.dirname(filename)), File.dirname(filename))
    self.process_file(env, filename)
  end
  def process_file(env, filename)
    puts("processing #{filename}")
    toml = TOML.load_file(filename)
    pp(toml)
    crate = FakeCargo::Crate.new(filename, toml)
    crate.dependencies.each do |dep|
      child = @fetch.fetch(env, crate, dep)
      self.process_file(child.env, child.env.path + '/Cargo.toml')
    end
    @action.call(env, crate)
  end

  def exec(cmdline)
    cmdline_ = "rustc #{cmdline.join(' ')}"
    puts(cmdline_)
    system("env CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=0 CFG_VERSION=0.1.0 #{cmdline_}")
    if File::exists?(@root.dir + '/liblib.rlib')
      raise(Exception, "created liblib.rlib")
    end
  end
  
  def show(env, crate)
    pp(builddir: env.dir, cmdline: crate.cmdline.join(' '))
  end
  def libpaths(env)
    env.children.inject([ env.dir ]) do |memo, child|
      memo + libpaths(child)
    end
  end
  def build(env, crate)
    libpaths = self.libpaths(env)
    cmdline = []
    cmdline += crate.cmdline
    all_children_proc = proc do |env|
      env.children + env.children.map { |childenv| all_children_proc.call(childenv) }
    end
    all_children = all_children_proc.call(env).flatten
    childnames = all_children.inject(Array.new) do |memo, child|
      if child.name
        memo << child.name
      end
      memo
    end
    cmdline += [ '--out-dir', @root.dir ]
    cmdline += [ '-L', @root.dir ]
    cmdline += [ '-C', "link-args=\" -rpath #{@root.dir} \"" ]
    exec_types = [ [ 'rlib', 'lib' ], [ 'so', 'dylib' ] ]
    exec_types.each do |type|
      ch_cmdline = cmdline + childnames.sort.uniq.map do |child|
        [ '--extern', "#{child}=#{@root.dir}/lib#{child}.rlib" ]
      end.flatten
      ch_cmdline += [ '--crate-type', type[1] ]
      out_file = "#{@root.dir}/lib#{crate.name}.#{type[0]}"
      if File.exists?(out_file)
        puts("#{out_file} exists. skipping build.\n")
      else
        puts("building #{out_file}")
        self.exec(ch_cmdline)
      end
    end
  end
end

opts, files = FC::Options.from_cmd_line(ARGV)
processor = Processor.new(opts)

files.each do |file|
  processor.root_file(file)
end
